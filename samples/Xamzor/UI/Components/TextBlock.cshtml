@using Microsoft.AspNetCore.Blazor.Browser.Interop

@inherits UIElement

<div class="TextBlock" style="@LayoutCss @StyleString">@Text</div>
<img id="@Id" onerror="xamzorInit(this);" src/>

@functions{

    public string Foreground { get; set; } = "black";

    public string FontFamily { get; set; } = "Segoe UI";

    public double FontSize { get; set; } = 16;

    public FontWeight FontWeight { get; set; } = FontWeight.Normal;

    public FontStyle FontStyle { get; set; } = FontStyle.Normal;

    public TextWrapping TextWrapping { get; set; } = TextWrapping.WrapWholeWords;

    public TextTrimming TextTrimming { get; set; } = TextTrimming.None;

    public bool IsTextSelectionEnabled { get; set; } = false;

    public string Text { get; set; }

    protected override Point MeasureOverride(Point availableSize)
    {
        if (Text == null)
            return Point.Zero;

        var sizeString = RegisteredFunction.Invoke<string>("measureHtml",
            $"<div style=\"{StyleString} max-width: {availableSize.X}px; max-height: {availableSize.Y}px;\">{Text}</div>");

        var sizeParts = sizeString.Split(',');

        var size = Point.Min(availableSize, new Point(
            double.Parse(sizeParts[0]),
            double.Parse(sizeParts[1])));

        UILog.Write("TEXT", $"Measured a size of {size} for text '{Text}'");

        return size;
    }

    private string StyleString =>
        $"font-family: {FontFamily}; font-size: {FontSize}px; color: {Foreground};" +
        $"font-weight: {(int)FontWeight};" +
        $"font-style: {FontStyle.ToString().ToLower()};" +
        $"white-space: {(TextWrapping == TextWrapping.NoWrap ? "nowrap" : "pre-line")};" +
        $"overflow-wrap: {(TextWrapping == TextWrapping.Wrap ? "break-word" : "normal")};" +
        $"text-overflow: {(TextTrimming == TextTrimming.Ellipsis ? "ellipsis" : "clip")};" +
        (IsTextSelectionEnabled ? "" : "user-select: none; -ms-user-select: none; cursor: default;");
}