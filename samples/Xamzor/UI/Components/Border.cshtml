@inherits UIElement

<div xamzorid="@Id" class="Border" style="@LayoutCss
     background-color: @Background;
     border-color: @BorderBrush; border-style: solid;
     border-width: @(BorderThickness.Top)px @(BorderThickness.Right)px @(BorderThickness.Bottom)px @(BorderThickness.Left)px;
     border-radius: @(CornerRadius.Top)px @(CornerRadius.Right)px @(CornerRadius.Bottom)px @(CornerRadius.Left)px;">

    @ChildContent
</div>

@functions{

    public Thickness Padding { get; set; } = Thickness.Zero;

    public Thickness BorderThickness { get; set; } = Thickness.Zero;

    public Thickness CornerRadius { get; set; } = Thickness.Zero;

    public string Background { get; set; } = "transparent";

    public string BorderBrush { get; set; } = "transparent";

    protected override UIElementConfiguration OnConfiguring(UIElementConfiguration config) => base.OnConfiguring(config)
        .AffectsMeasure(nameof(Padding))
        .AffectsMeasure(nameof(BorderThickness));

    protected override Point MeasureOverride(Point availableSize)
    {
        var childSize = this.Children().FirstOrDefault()?
            .Measure(availableSize - Padding.Size - BorderThickness.Size) ?? Point.Zero;

        return childSize + Padding.Size + BorderThickness.Size;
    }

    protected override Point ArrangeOverride(Point finalSize)
    {
        // Note: Offset does not include BorderThickness.TopLeft as that is already
        // accounted for by the HTML layout
        this.Children().FirstOrDefault()?.Arrange(new Rect(
            Padding.TopLeft,
            finalSize - Padding.Size - BorderThickness.Size));

        return finalSize;
    }
}