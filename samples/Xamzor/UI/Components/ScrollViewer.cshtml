@inherits UIElement

<div class="ScrollViewer" style="@LayoutCss @StyleString">
    <img id="@Id" onerror="xamzorInit(this);" src/>
    @ChildContent
</div>

@functions{

    public ScrollMode HorizontalScrollMode { get; set; } = ScrollMode.Disabled;

    public ScrollMode VerticalScrollMode { get; set; } = ScrollMode.Auto;

    protected override Point MeasureOverride(Point availableSize)
    {
        // Space in each direction is unlimited if scrolling is allowed
        var childAvailableSize = new Point(
            (HorizontalScrollMode == ScrollMode.Disabled) ? availableSize.X : double.PositiveInfinity,
            (VerticalScrollMode == ScrollMode.Disabled) ? availableSize.Y : double.PositiveInfinity);

        var childSize = this.Children().FirstOrDefault()?
            .Measure(childAvailableSize) ?? Point.Zero;

        return childSize;
    }

    protected override Point ArrangeOverride(Point finalSize)
    {
        if (this.Children().FirstOrDefault() is UIElement child)
        {
            // To prevent the child from applying clipping, we provide it the size it desires even
            // if that exceeds the given finalSize. (With clipping, we wouldn't see any content when 
            // scrolling beyond the initial scroll position.)
            var arrangeSize = new Point(
                (HorizontalScrollMode == ScrollMode.Disabled) ? finalSize.X : Math.Max(finalSize.X, child.DesiredSize.X),
                (VerticalScrollMode == ScrollMode.Disabled) ? finalSize.Y : Math.Max(finalSize.Y, child.DesiredSize.Y));

            child.Arrange(new Rect(Point.Zero, arrangeSize));
        }

        return finalSize;
    }

    private string StyleString =>
        $"overflow-x: {(HorizontalScrollMode == ScrollMode.Disabled ? "hidden" : HorizontalScrollMode == ScrollMode.Enabled ? "scroll" : "auto")};" +
        $"overflow-y: {(VerticalScrollMode == ScrollMode.Disabled ? "hidden" : VerticalScrollMode == ScrollMode.Enabled ? "scroll" : "auto")};";
}