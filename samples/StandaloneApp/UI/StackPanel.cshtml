@inherits StandaloneApp.UI.UIElement

<div style="@LayoutCss">
    @ChildContent
</div>

@functions{

    public Orientation Orientation { get; set; } = Orientation.Vertical;

    public double Spacing { get; set; } = 0;

    protected override Point MeasureOverride(Point availableSize)
    {
        var childAvailableSize = (Orientation == Orientation.Vertical)
            ? new Point(
                Clamp(Width.OrIfNan(availableSize.X), MinSize.X, MaxSize.X),
                double.PositiveInfinity)
            : new Point(
                double.PositiveInfinity,
                Clamp(Height.OrIfNan(availableSize.Y), MinSize.Y, MaxSize.Y));

        var measuredSize = Point.Zero;

        foreach (var child in Children)
        {
            child.Measure(childAvailableSize);
            var size = child.DesiredSize;

            if (Orientation == Orientation.Vertical)
            {
                measuredSize = new Point(
                    Max(measuredSize.X, size.X),
                    measuredSize.Y + size.Y + Spacing);
            }
            else
            {
                measuredSize = new Point(
                    measuredSize.X + size.X + Spacing,
                    Max(measuredSize.Y, size.Y));
            }
        }

        measuredSize -= (Orientation == Orientation.Vertical)
            ? new Point(0, Spacing)
            : new Point(Spacing, 0);

        return measuredSize;
    }

    protected override Point ArrangeOverride(Point finalSize)
    {
        var arrangedSize = (Orientation == Orientation.Vertical)
            ? new Point(finalSize.X, 0)
            : new Point(0, finalSize.Y);

        foreach (var child in Children)
        {
            var childSize = child.DesiredSize;

            if (Orientation == Orientation.Vertical)
            {
                var childFinal = new Rect(0, arrangedSize.Y, Max(childSize.X, arrangedSize.X), childSize.Y);
                child.Arrange(childFinal);
                arrangedSize = new Point(
                    Max(arrangedSize.X, childSize.X),
                    arrangedSize.Y + childSize.Y + Spacing);
            }
            else
            {
                var childFinal = new Rect(arrangedSize.X, 0, childSize.X, Max(childSize.Y, arrangedSize.Y));
                child.Arrange(childFinal);
                arrangedSize = new Point(
                    arrangedSize.X + childSize.X + Spacing,
                    Max(arrangedSize.Y, childSize.Y));
            }
        }

        arrangedSize = (Orientation == Orientation.Vertical)
            ? new Point(arrangedSize.X, Max(arrangedSize.Y - Spacing, finalSize.Y))
            : new Point(Max(arrangedSize.X - Spacing, finalSize.X), arrangedSize.Y);

        return arrangedSize;
    }
}